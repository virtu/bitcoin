#!/usr/bin/env python3

# Copyright (c) 2024 The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

"""
Tool to find differences autonomous systems of Bitcoin nodes ...

TODO:
Tool to convert a compact-serialized UTXO set to a SQLite3 database.
The input UTXO set can be generated by Bitcoin Core with the `dumptxoutset` RPC:
$ bitcoin-cli dumptxoutset ~/utxos.dat
The created database contains a table `utxos` with the following schema:
(txid TEXT, vout INT, value INT, coinbase INT, height INT, scriptpubkey TEXT)
"""

import argparse
import json
import sys
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path


@dataclass
class Node:
    """Data class representing a node."""

    last_seen: datetime
    address: str
    port: int
    network: str


def get_clearnet_nodes(filepath: Path) -> list[Node]:
    """Parse node address file and return a list of ipv4/ipv6 nodes."""
    with open(filepath, "r", encoding="ascii") as f:
        data = json.load(f)
    nodes = []
    for entry in data:
        if entry["network"] not in ["ipv4", "ipv6"]:
            continue
        last_seen = datetime.utcfromtimestamp(entry["time"])
        node = Node(last_seen, entry["address"], entry["port"], entry["network"])
        nodes.append(node)

    ipv4_nodes = len([n for n in nodes if n.network == "ipv4"])
    print(
        f"Extracted {len(nodes)} clearnet nodes (ipv4={ipv4_nodes}, ipv6={len(nodes)-ipv4_nodes}) from {filepath}."
    )

    return nodes


def parse_args():
    """Parse command-line arguments."""
    # parser = argparse.ArgumentParser()
    #     description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    # )
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "addresses_file",
        help="node address file (generated with `getnodeaddresses 0` RPC)",
        type=Path,
    )
    parser.add_argument(
        "asmap1_file",
        help="first asmap file",
        type=Path,
    )
    parser.add_argument(
        "asmap2_file",
        help="second asmap file",
        type=Path,
    )
    parser.add_argument(
        "-v", "--verbose", action="store_true", help="show details about each UTXO"
    )

    args = parser.parse_args()

    def check_input(file: Path):
        """Run sanity checks on input files."""
        if not file.exists():
            print(f"Error: input '{file}' doesn't exist.")
            sys.exit(1)
        if not file.is_file():
            print(f"Error: input '{file}' isn't a file.")
            sys.exit(1)

    for file in [args.addresses_file, args.asmap1_file, args.asmap2_file]:
        check_input(file)

    return args


def main():
    """XXX TODO Main function to demonstrate script functionality."""
    args = parse_args()

    nodes = get_clearnet_nodes(args.addresses_file)

    print(args)
    print("Hello, world!")


if __name__ == "__main__":
    main()
